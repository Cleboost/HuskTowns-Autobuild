# Builds, tests and publishes to a GitHub Release on push to main
name: Build and Release on Main

on:
  push:
    branches:
      - main

permissions:
  contents: write # N√©cessaire pour cr√©er la release et t√©l√©verser le JAR
  checks: write
  
env:
  # D√©finir le nom du JAR (ajuster si le nom r√©el est diff√©rent, par ex. 'my-plugin-paper-*.jar')
  # Le nom exact du fichier de sortie d√©pend de votre build.gradle.
  # Nous utiliserons un wildcard dans le job.
  JAR_FILE_PATH: "**/build/libs/*.jar"
  RELEASE_NAME: "Build ${{ github.run_id }}"
  RELEASE_TAG: "build-${{ github.run_id }}"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout for CI üõéÔ∏è'
        uses: actions/checkout@v4
        
      - name: 'Set up JDK 21 üì¶'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: 'Build with Gradle üèóÔ∏è'
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build # Fait 'build' et 'test'
        # Suppression de l'env pour la publication Maven si vous ne voulez pas publier √† chaque push.
        
      - name: 'Publish Test Report üìä'
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # Continue on failure
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

# --------------------------------------------------------------------------------------------------

      - name: 'Find the Paper JAR Path üîç'
        id: find_jar
        # Utilise un glob pour trouver le chemin exact du JAR g√©n√©r√© pour Paper.
        run: |
          JAR_PATH=$(find . -path "${{ env.JAR_FILE_PATH }}" -print -quit)
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: 'Create GitHub Release üè∑Ô∏è'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: "Automated build from push to main.\nRun ID: ${{ github.run_id }}\nCommit: ${{ github.sha }}"
          draft: false
          prerelease: true
          # Le JAR sera ajout√© dans l'√©tape suivante, pas ici
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token par d√©faut est suffisant
          
      - name: 'Upload Paper JAR to Release ‚è´'
        uses: actions/upload-release-asset@v1
        id: upload-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.jar_path }}
          asset_name: ${{ env.RELEASE_NAME }}.jar # Nom du fichier dans la release
          asset_content_type: application/java-archive
